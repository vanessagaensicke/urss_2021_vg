{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TO DO\n",
    "\n",
    "# DONE\n",
    "# edit filename as store as a string\n",
    "# loop through given folder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"amo = {\\n    'molecule_name'={\\n        atom_count:,\\n        box_length:,\\n        residues={\\n            'res1'={\\n                'Atom1'={\\n                    'uniqueID':,\\n                    'coordinates':[]\\n                }\\n            }\\n        }\\n    }\\n}\\n\\n\\n# populated with one drug, aceclofenac\\n\\namo = {\\n    'aceclofenac'={\\n        atom_count:8202,\\n        box_length:4.52041,\\n        residues={\\n            'acec1'={\\n                'C1'={\\n                    'uniqueID':1,\\n                    'coordinates'=[3.727, 3.591, 1.026]\\n                }\\n            }\\n        }\\n    },\\n    'next_drug'\\n}\""
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# plan for dictionary final state\n",
    "\n",
    "'''amo = {\n",
    "    'molecule_name'={\n",
    "        atom_count:,\n",
    "        box_length:,\n",
    "        residues={\n",
    "            'res1'={\n",
    "                'Atom1'={\n",
    "                    'uniqueID':,\n",
    "                    'coordinates':[]\n",
    "                }\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "}\n",
    "\n",
    "\n",
    "# populated with one drug, e.g. aceclofenac\n",
    "\n",
    "amo = {\n",
    "    'aceclofenac'={\n",
    "        atom_count:8202,\n",
    "        box_length:4.52041,\n",
    "        residues={\n",
    "            'acec1'={\n",
    "                'C1'={\n",
    "                    'uniqueID':1,\n",
    "                    'coordinates'=[3.727, 3.591, 1.026]\n",
    "                }\n",
    "            }\n",
    "        }\n",
    "    },\n",
    "    'next_drug'\n",
    "}'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import relevant packages\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def read_gro(filename):\n",
    "    global molecule, atom_count, res, atm, atm_id, x, y, z, coord, box_length\n",
    "    res = []; atm = []; atm_id = []; x = []; y = []; z = []; coord = []\n",
    "    with open(filename) as gro:\n",
    "        molecule=os.path.splitext(filename)[0]\n",
    "        # skip first line, contains no relevant information\n",
    "        next(gro)\n",
    "        # store second line as total atoms in drug\n",
    "        atom_count = int(next(gro))\n",
    "        for line in gro: \n",
    "            # if/else to distinguish between residue data and box length\n",
    "            if molecule[0:4] in line.lower():\n",
    "                # remove new line character and split into categories\n",
    "                col = line.strip().split()\n",
    "                res.append(col[0])\n",
    "                atm.append(col[1])\n",
    "                atm_id.append(col[2])\n",
    "                x.append(col[3])\n",
    "                y.append(col[4])\n",
    "                z.append(col[5])\n",
    "                coord.append(col[3:6])\n",
    "            # final line stored as box length   \n",
    "            else:\n",
    "                box_length=line.split()[0]\n",
    "        return molecule, atom_count, res, atm, atm_id, x, y, z, coord, box_length"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '../../Data/endOfEqGro'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<timed exec>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '../../Data/endOfEqGro'"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "directory = '../../Data/endOfEqGro'\n",
    "amo_gro={}\n",
    "\n",
    "for filename in os.listdir(directory):\n",
    "    if filename.endswith(\"aceclofenac.gro\"):\n",
    "        read_gro(filename)\n",
    "        residues={}\n",
    "        atom={}\n",
    "        for i in range(atom_count):\n",
    "            short_mol=str(i+1)+molecule[0:4]\n",
    "            if short_mol in res:\n",
    "                atom[atm[i]]=atm_id[i], coord[i]\n",
    "            residues[short_mol]=atom\n",
    "        amo_gro[molecule]={\n",
    "            'atom_count':atom_count,\n",
    "            'box_length':box_length,\n",
    "            'residues':residues\n",
    "        }  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '../../Data/endOfEqGro'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<timed exec>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '../../Data/endOfEqGro'"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "directory = '../../Data/endOfEqGro'\n",
    "amo_gro={}\n",
    "\n",
    "for filename in os.listdir(directory):\n",
    "    if filename.endswith(\".gro\"):\n",
    "        read_gro(filename)\n",
    "        residues={}\n",
    "        atom={}\n",
    "        atom_id={}\n",
    "        coordinate={}\n",
    "        for i in range(atom_count):\n",
    "            short_mol=str(i+1)+molecule[0:4]\n",
    "            if short_mol in res:\n",
    "                atom[atm[i]]={\n",
    "                    'atom_id':atm_id[i],\n",
    "                    'coord':coord[i]\n",
    "                }\n",
    "            residues[short_mol]=atom\n",
    "        amo_gro[molecule]={\n",
    "            'atom_count':atom_count,\n",
    "            'box_length':box_length,\n",
    "            'residues':residues\n",
    "        }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 634,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "38"
      ]
     },
     "execution_count": 634,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# misc commands\n",
    "set(atm)\n",
    "len(set(atm))\n",
    "print(amo_gro['aceclofenac']['residues']['1acec']['C1'])\n",
    "amo_gro.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 601,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Residue</th>\n",
       "      <th>Atom</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Atom ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1acec</td>\n",
       "      <td>C1</td>\n",
       "      <td>3.727</td>\n",
       "      <td>3.591</td>\n",
       "      <td>1.026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1acec</td>\n",
       "      <td>C2</td>\n",
       "      <td>3.618</td>\n",
       "      <td>3.670</td>\n",
       "      <td>0.989</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1acec</td>\n",
       "      <td>C3</td>\n",
       "      <td>3.582</td>\n",
       "      <td>3.775</td>\n",
       "      <td>1.081</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1acec</td>\n",
       "      <td>C4</td>\n",
       "      <td>3.668</td>\n",
       "      <td>3.813</td>\n",
       "      <td>1.185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1acec</td>\n",
       "      <td>C5</td>\n",
       "      <td>3.786</td>\n",
       "      <td>3.742</td>\n",
       "      <td>1.206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8204</th>\n",
       "      <td>216acec</td>\n",
       "      <td>H11</td>\n",
       "      <td>0.420</td>\n",
       "      <td>4.215</td>\n",
       "      <td>3.496</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8205</th>\n",
       "      <td>216acec</td>\n",
       "      <td>H12</td>\n",
       "      <td>0.304</td>\n",
       "      <td>3.999</td>\n",
       "      <td>3.548</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8206</th>\n",
       "      <td>216acec</td>\n",
       "      <td>H13</td>\n",
       "      <td>0.405</td>\n",
       "      <td>3.846</td>\n",
       "      <td>3.705</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8207</th>\n",
       "      <td>216acec</td>\n",
       "      <td>LP1</td>\n",
       "      <td>0.567</td>\n",
       "      <td>3.979</td>\n",
       "      <td>3.766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8208</th>\n",
       "      <td>216acec</td>\n",
       "      <td>LP2</td>\n",
       "      <td>0.575</td>\n",
       "      <td>4.198</td>\n",
       "      <td>3.636</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>16416 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Residue Atom      x      y      z\n",
       "Atom ID                                   \n",
       "1          1acec   C1  3.727  3.591  1.026\n",
       "2          1acec   C2  3.618  3.670  0.989\n",
       "3          1acec   C3  3.582  3.775  1.081\n",
       "4          1acec   C4  3.668  3.813  1.185\n",
       "5          1acec   C5  3.786  3.742  1.206\n",
       "...          ...  ...    ...    ...    ...\n",
       "8204     216acec  H11  0.420  4.215  3.496\n",
       "8205     216acec  H12  0.304  3.999  3.548\n",
       "8206     216acec  H13  0.405  3.846  3.705\n",
       "8207     216acec  LP1  0.567  3.979  3.766\n",
       "8208     216acec  LP2  0.575  4.198  3.636\n",
       "\n",
       "[16416 rows x 5 columns]"
      ]
     },
     "execution_count": 601,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# pandas trial\n",
    "\n",
    "# add all relevant columns to DataFrame\n",
    "df = pd.DataFrame(list(zip(res, atm, atm_id, x, y, z)),\n",
    "                  columns=['Residue', 'Atom', 'Atom ID', 'x', 'y', 'z'])\n",
    "\n",
    "# set atom ID to index, as it is a unique identifier\n",
    "df.set_index('Atom ID')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 603,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.727 3.591 1.026\n",
      "3.618 3.775 1.081\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.00974549999999998"
      ]
     },
     "execution_count": 603,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# convert to numerical data from string for calculation\n",
    "df[[\"x\", \"y\", 'z']] = df[['x', 'y', 'z']].apply(pd.to_numeric)\n",
    "\n",
    "# coordinates of acec1, C1 and C2\n",
    "print(df['x'][0], df['y'][0], df['z'][0])\n",
    "print(df['x'][1], df['y'][2], df['z'][2])\n",
    "\n",
    "# distance between C1 and C2 in nm (similar approach required for H-bond distances)\n",
    "((((df['x'][0]-df['x'][1])**2)+(df['y'][0]-df['y'][1])**2 + (df['z'][0]-df['z'][1])**2)**1/2)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
